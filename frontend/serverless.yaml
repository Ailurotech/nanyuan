service: nanyuan-web-app-services

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${env:AWS_REGION}

custom:
  serverless-nextjs:
    bucketName: nanyuan-function-bucket
    name:
      defaultLambda: nanyuan-app-default-lambda
      apiLambda: nanyuan-api-lambda
    memory:
      defaultLambda: 1024
      apiLambda: 1024
    timeout:
      defaultLambda: 10
      apiLambda: 30
    hasApi: true
    build:
      postBuildCommands: ["yarn run other-script"]
    customDomain: ${env:DOMAIN, ''}

functions:
  sendEmail:
    handler: lambda/send-email.handler
    memorySize: 1024
    timeout: 28
    role: ServerlessNextjsLambdaRole 
    events:
      - http:
          path: api/send-email
          method: post
          cors:
            origin: '*' # Allow all domains (replace with specific domains in production)
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

    environment:
      EMAIL_FROM: ${env:EMAIL_FROM}
      EMAIL_TO: ${env:EMAIL_TO}

  createCheckoutSession:
    handler: lambda/create-checkout-session.handler
    memorySize: 1024
    timeout: 28
    role: ServerlessNextjsLambdaRole
    events:
      - http:
          path: api/create-checkout-session
          method: post
          cors:
            origin: '*' # Allow all domains (replace with specific domains in production)
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
    environment:
      STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
      CLIENT_BASE_URL: ${env:CLIENT_BASE_URL}

  webhookHandler: 
    handler: lambda/webhook-handler.handler 
    memorySize: 1024
    timeout: 28
    role: ServerlessNextjsLambdaRole
    events:
      - http:
          path: api/webhooks/stripe
          method: post
          cors:
            origin: '*' # Allow all domains
            headers:
              - Content-Type
              - Stripe-Signature
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
    environment:
      STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${env:STRIPE_WEBHOOK_SECRET}
      SANITY_PROJECT_ID: ${env:SANITY_PROJECT_ID}
      SANITY_DATASET: ${env:SANITY_DATASET}
      SANITY_API_TOKEN: ${env:SANITY_API_TOKEN}

resources:
  Resources:
    ServerlessNextjsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: SendEmailPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ses:SendEmail
                    - ses:SendRawEmail
                  Resource: "*"
          - PolicyName: StripePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:CreateLogGroup
                  Resource: "*"
